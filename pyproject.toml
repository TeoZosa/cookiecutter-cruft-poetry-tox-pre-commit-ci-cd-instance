[tool.poetry]
name = "cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance"
version = "0.0.3"
description = "Cookiecutter Cruft Poetry Tox Pre Commit Ci Cd Instance"
authors = ["YOUR_FIRST_AND_LAST_NAME <action@github.com>"]
license = "Apache-2.0"
readme = "README.md"
repository = "https://github.com/TeoZosa/cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance"
homepage = "https://github.com/TeoZosa/cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance"
include = ["cookiecutter_cruft_poetry_tox_pre_commit_ci_cd_instance/py.typed"]
keywords = []
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

#
[tool.poetry.build]
script = "build.py"
generate-setup-file = true
#

[tool.poetry.urls]
Changelog = "https://github.com/TeoZosa/cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance/releases"

[tool.poetry.dependencies]
python = "^3.8,<3.12"

# Monitoring and Observability
sentry-sdk = "^1.11.0"
structlog-sentry-logger = "^0.18.0"

#
# Jupyter Notebook
jupyter = "^1.0.0"
matplotlib = "^3.6.2"
#
#
# Type Checking and Data Validation
typeguard = "^2.13.3" # Runtime type checker; Note: Mypyc-compiled C-extensions also perform runtime type checking.
#

# Project-Specific
python-dotenv = "^0.21.0"
#
importlib-metadata = "^5.0.0"
rich = "^12.5.1"
typer = {extras = ["all"], version = ">=0.4,<0.7"}
#

[tool.poetry.group.dev.dependencies]
# Standardized Developer Workflow Orchestration
cruft = "^2.11.1" # Automated Cookiecutter template synchronization

# Type Checking and Data Validation
mypy = "^0.991" # Static type checker (includes Mypyc Python module to C-Extension compiler, enabled by standard Python type annotations)

# Testing
#
nbqa = "^1.5.3"
#
pytest = "^7.2.0"
#
pytest-benchmark = {extras = ["histogram"], version = "^4.0.0"}
#
pytest-cov = "^4.0.0"
pytest-emoji = "^0.2.0"
pytest-mock = "^3.10.0"
pytest-sugar = "^0.9.4"
pytest-xdist = "^3.0.2"
#
hypothesis = "^6.58.0"
#
#
mutmut = "^2.4.2"
#
xdoctest = {extras = ["all"], version = "^1.1.0"}
tox = "^3.27.1"
tox-wheel = "^1.0.0"

# Linting
## Code formatting
black = "^22.10.0" # see: https://black.readthedocs.io/en/stable/editor_integration.html
## Code quality
pylint = "^2.15.6"
## Automation and management
pre-commit = "^2.20.0"

# CI/CD
tox-gh-actions = "^2.11.0"

# Documentation
darglint = "^1.8.1"
#
nodeenv = "^1.7.0" # ADR documentation Node dependency
#

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
emoji = "^2.2.0"
#
myst-parser = "^0.18.1"
pygments = "^2.13.0"
sphinx = "^5.3.0"
sphinx-autoapi = "^2.0.0"
sphinx-rtd-theme = "^1.1.1"
sphinxcontrib-confluencebuilder = "^1.9.0"
types-emoji = "^2.1.0.1" # PEP 561 compliant stub package for mypy

#
[tool.poetry.scripts]
"cookiecutter-cruft-poetry-tox-pre-commit-ci-cd-instance" = "cookiecutter_cruft_poetry_tox_pre_commit_ci_cd_instance.main:app"
#

#################################################################################
# Tooling configs                                                               #
#################################################################################
[tool.coverage.run]
branch = true
concurrency = ["multiprocessing"]
parallel = true
source = ["cookiecutter_cruft_poetry_tox_pre_commit_ci_cd_instance"]

[tool.coverage.report]
exclude_lines =[
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
fail_under = 100
show_missing = true
skip_covered = true

[tool.cruft]
skip = [
    ".env",
    ".python-version",
    "cookiecutter_cruft_poetry_tox_pre_commit_ci_cd_instance/__init__.py",
    "docs/source/.env",
]

[tool.flakeheaven]
# specify any flake8 options
exclude = [".*"] # Ignore dotfiles
# make output nice
format = "grouped"
# show line of source code in output
show_source = true

# list of plugins and rules for them
[tool.flakeheaven.plugins]
# cyclomatic complexity (https://github.com/PyCQA/mccabe)
mccabe = ["+*"]
# include everything in pyflakes except F401
pyflakes = ["+*", "-F401"]
# include everything in pycodestyle except what Black covers
pycodestyle = ["+*",
    "-E203", # Whitespace before ":"
    "-E501", # Line too long (82 > 78 characters)
    "-W503",  # Line break occurred before a binary operator <- this is now considered best practice by PEP 8
#
    # Ignore errors resulting from Jupyter notebook to Python module portability formatting
    "-E265", # block comment should start with '# '
    # Ignore errors resulting from Jupyter notebook-style programming
    "-E402", # module level import not at top of file
#
]

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = false
fail-under = 0 # adjust `fail-under` value as quality standards permit
whitelist-regex = []
color = true

[tool.isort]
profile = "black"
atomic = true
combine_as_imports = true

[tool.mypy]
disallow_untyped_defs = true
files = "**/*.py"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
show_error_context = true
show_error_codes = true

[tool.pylint.basic]
good-names-rgxs = ["^Test_.*$"]

[tool.pylint.messages_control]
disable = [
  # Explicitly document only as needed
  "missing-module-docstring",
  "missing-class-docstring",
  "missing-function-docstring",
  # Black & Flake8 purview
  "line-too-long",
  "c-extension-no-member",
#
  # Ignore errors resulting from Jupyter notebook-style programming
  "invalid-name",
  "redefined-outer-name",
  "reimported",
  "ungrouped-imports",
  "wrong-import-order",
  "wrong-import-position",
#
]

[tool.pylint.similarities]
# Ignore imports when computing similarities.
ignore-imports = "yes"

[tool.pytest.ini_options]
addopts = ["-rfsxX", "-l", "--tb=short", "--strict-markers", "-vv", "--emoji", "--xdoctest"]
xfail_strict = true
markers = [
    "pure_python_only: mocker-based tests which are not compatible with compiled C extensions",
]
testpaths = ["tests",]
norecursedirs = [".*", "*.egg", "build", "dist",]

[build-system]
requires = ["poetry-core>=1.0.0",
    #
    "mypy", "setuptools",
    #
]
build-backend = "poetry.core.masonry.api"
